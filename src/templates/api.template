--- name:content pipeline:erb
<section class="wrapper style1">
  <div class="container">
    <div class="row">
      <div class="3u 12u(narrower) api-menu">
        <section>
          <h3>Classes and Modules</h3>
<%
rdoc_object = context.node.node_info[:rdoc_object]
api = context.node.node_info[:api]

opts = {alcn: ['/api/**/*.html', '/api/HexaPDF/'], not: {alcn: ['/api/**/index.*.html', '/api/index.html']}}
%>
<%= context.tag('menu', 'options' => opts, 'template' => '') %>
        </section>
      </div>

      <div class="8u 12u(narrower) important(narrower)">
        <div id="content">

<%= context.render_block(name: "api", node: "current") %>

        </div>
      </div>
    </div>
  </div>
</section>


--- name:tag.menu pipeline:ruby --------------------------------------------------------------------
cache = (context.website.cache.permanent[:api_names] ||= {})

nested_list = lambda do |nodes, level|
  out = "<ul>"
  nodes.each do |node, children|
    link_text = (cache[node.alcn] ||= node['title'].sub(/^.*::/, ''))
    menu = (children ? nested_list.call(children, level + 1) : '')
    link = context.dest_node.link_to(node, context.content_node.lang, 'link_text' => link_text)
    out << "<li>#{link}"
    out << menu
    out << "</li>"
  end
  out << "</ul>"
  out
end
context.content = nested_list.call(context[:nodes], 1)


--- name:api pipeline:ruby -------------------------------------------------------------------------
rdoc_object = context.node.node_info[:rdoc_object]
if rdoc_object.kind_of?(::RDoc::ClassModule)
  context.content = context.render_block(:name => 'klass', :node => 'current')
else
  context.content = context.render_block(:name => 'page', :node => 'current')
end
--- name:page pipeline:erb
<% page = context.node.node_info[:rdoc_object] %>
<div class="api-documentation api-page">
  <div class="description">
    <%= page.description %>
  </div>
</div>
--- name:klass pipeline:erb
<% klass = context.node.node_info[:rdoc_object] %>
<div class="api-documentation api-<%= klass.type %>">
  <h2 class="<%= klass.type %>"><%= klass.type %> <%= klass.full_name %></h2>

  <div class="description">
    <%= klass.description %>
  </div><!-- description -->

  <% klass.each_section do |section, constants, attributes| %>
  <% constants = constants.select { |const| const.display? } %>
  <% attributes = attributes.select { |attr| attr.display? } %>
  <section id="<%= section.aref %>" class="documentation-section">
    <% if section.title then %>
    <div class="documentation-section-title">
      <h2 class="section-header">
        <%= section.title %>
      </h2>
    </div>
    <% end %>

    <% if section.comment then %>
    <div class="description">
      <%= section.description %>
    </div>
    <% end %>

    <% unless constants.empty? then %>
    <!-- Constants -->
    <section id="constants-list" class="section">
      <h3 class="section-header">Constants</h3>
      <dl>
      <% constants.each do |const| %>
        <dt id="<%= const.name %>"><%= const.name %>
        <% if const.comment then %>
        <dd class="description"><%= const.description.strip %>
        <% else %>
        <dd class="description missing-docs">(Not documented)
        <% end %>
      <% end %>
      </dl>
    </section>
    <% end %>

    <% unless attributes.empty? then %>
    <!-- Attributes -->
    <section id="attribute-method-details" class="method-section section">
      <h3 class="section-header">Attributes</h3>

      <% attributes.each do |attrib| %>
      <div id="<%= attrib.aref %>" class="method-detail">
        <div class="method-heading attribute-method-heading">
          <span class="method-name"><%= h attrib.name %></span><span
            class="attribute-access-type">[<%= attrib.rw %>]</span>
        </div>

        <div class="method-description">
        <% if attrib.comment then %>
        <%= attrib.description.strip %>
        <% else %>
        <p class="missing-docs">(Not documented)
        <% end %>
        </div>
      </div>
      <% end %>
    </section><!-- attribute-method-details -->
    <% end %>

    <!-- Methods -->
    <% klass.methods_by_type(section).each do |type, visibilities|
       next if visibilities.empty?
       visibilities.each do |visibility, methods|
         next if methods.empty? %>
     <section id="<%= visibility %>-<%= type %>-<%= section.aref %>-method-details" class="method-section section">
      <h3 class="section-header"><%= visibility.to_s.capitalize %> <%= type.capitalize %> Methods</h3>

    <% methods.each do |method| %>
      <div id="<%= method.aref %>" class="method-detail <%= method.is_alias_for ? "method-alias" : '' %>">
        <% if method.call_seq then %>
        <%   method.call_seq.strip.split("\n").each_with_index do |call_seq, i| %>
        <div class="method-heading">
          <span class="method-callseq">
            <%= h(call_seq.strip.
                  gsub( /^\w+\./m, '')).
                  gsub(/(.*)[-=]&gt;/, '\1&rarr;') %>
          </span>
          <% if i == 0 and method.token_stream then %>
          <span class="method-click-advice">click to toggle source</span>
          <% end %>
        </div>
        <%   end %>
        <% else %>
        <div class="method-heading">
          <span class="method-name"><%= h method.name %></span><span
            class="method-args"><%= method.param_seq %></span>
          <% if method.token_stream then %>
          <span class="method-click-advice">click to toggle source</span>
          <% end %>
        </div>
        <% end %>

        <div class="method-description">
          <% if method.comment then %>
          <%= method.description.strip %>
          <% else %>
          <p class="missing-docs">(Not documented)
          <% end %>
          <% if method.calls_super then %>
            <div class="method-calls-super">
              Calls superclass method
              <%=
                  method.superclass_method ?
                  method.formatter.link(method.superclass_method.full_name, method.superclass_method.full_name) : nil
              %>
            </div>
          <% end %>

          <% if method.token_stream then %>
          <div class="method-source-code" id="<%= method.html_name %>-source">
            <pre><%= method.markup_code %></pre>
          </div><!-- <%= method.html_name %>-source -->
          <% end %>
        </div>

        <% unless method.aliases.empty? then %>
        <div class="aliases">
          Also aliased as: <%= method.aliases.map do |aka|
            if aka.parent then # HACK lib/rexml/encodings
              %{<a href="#{klass.aref_to aka.path}">#{h aka.name}</a>}
            else
              h aka.name
            end
          end.join ", " %>
        </div>
        <% end %>

        <% if method.is_alias_for then %>
        <div class="aliases">
          Alias for: <a href="<%= klass.aref_to method.is_alias_for.path %>"><%= h method.is_alias_for.name %></a>
        </div>
        <% end %>
      </div><!-- <%= method.html_name %>-method -->

    <% end %>
    </section><!-- <%= visibility %>-<%= type %>-method-details -->
  <% end
     end %>
  </section><!-- <%= section.aref %> -->
<% end %>

</div><!-- documentation -->
